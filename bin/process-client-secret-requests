#!/apollo/sbin/envroot $ENVROOT/bin/python2.7
# *-*-python-*-*

import boto
import json
import base64
import socket
import time
import random
import dbauto_odin_util
from sas.apollo import apollo
from radiussecrets import *
from radiusconstants import *
from pyodinhttp import odin_material_retrieve
import logging

logging.basicConfig(level=logging.INFO,format='[%(levelname)s] %(message)s')

aws_credential_materialset = apollo.getOpConfig("RadiusProxy","awsCredentialMaterialSetName")
aws_encryption_materialset = apollo.getOpConfig("RadiusProxy","awsEncryptionMaterialSet")
dynamo_secret_table = apollo.getOpConfig("RadiusProxy","RadiusProxyClientSecretTable")

sqs_credential_materialset = apollo.getOpConfig("RadiusProxy","sqsCredentialMaterialSetName")
sqs_encryption_materialset = apollo.getOpConfig("RadiusProxy","sqsSecretKey")
sqs_submission_queue = apollo.getOpConfig("RadiusProxy","sqsSubmissionQueue")
max_sleep_time = apollo.getOpConfig("RadiusProxy","sleepInterval")

if max_sleep_time is None:
    max_sleep_time = 300
else:
    max_sleep_time = int(max_sleep_time)
    
if aws_credential_materialset is None:
    aws_credential_materialset = "com.amazon.dbautomation.dbautomation-aws-keys"

if aws_encryption_materialset is None:
    aws_encryption_materialset = "com.amazon.dbautomation.radius_proxy_key"

if dynamo_secret_table is None:
    dynamo_secret_table = "qradius_secrets"

if sqs_credential_materialset is None:
    sqs_credential_materialset = "com.amazon.dbautomation.dbautomation-aws-keys"

if sqs_encryption_materialset is None:
    sqs_encryption_materialset = "com.amazon.dbautomation.radius_client_key"

if sqs_submission_queue is None:
    sqs_submission_queue = "OracleRadiusProxyClientUpdates"




def validate_request(request):
    """
    verify that a client request in the SQS queue is "sane",
    so that we can avoid dealing with junk

    @param request

    @type request dict containing parameters describing a request to modify a
          client secret

          not_before : int/seconds since epoch 
          not_after : int/seconds since epoch
          action : [add, ]
          ip : client ip address (string format)
          secret : client secret

    """
    now = time.time()
    
    try:

        try:
            socket.inet_aton(request['ip'])
        except:
            return False

        if not request.has_key('action'):
            return False
            
        if len(request['secret']) > MAX_SECRET_LENGTH or len(request['secret']) == 0:
            return False
   
        if request.has_key('not_before'):
            if not isinstance(now,(float, int)):
                return False

        if request.has_key('not_after'):
            if not isinstance(now,(float, int)):
                return False

    except KeyError:
        return False

    return True


def process_request(request,client_secret_server):
    """
    process a request from the queue

    @param request

    @param client_secret_server

    @type dict containing parameters describing a request to modify a
          client secret

          not_before : int/seconds since epoch 
          not_after : int/seconds since epoch
          action : [add, ]
          ip : client ip address (string format)
          secret : client secret

    @type client_secret_server RadiusSecrets

    """

    assert(isinstance(client_secret_server,RadiusSecrets))

    if validate_request(request):
        logging.debug("request passed validation")
    else:
        return False

    if request['action'] == 'add':
        
        now = time.time()
        
        if 'not_before' not in request:
            request['not_before'] = now
        
        if 'not_after' not in request:
            request['not_after'] = now*10

        client_secret_server.putSecret(request['ip'],request['secret'],request['not_before'],request['not_after'])
        logging.debug("submitted secret to dynamo table")

        
        logging.debug("purge %d old secrets for %s" % (client_secret_server.purgeSecrets(request['ip']),request['ip']))

        return True
    else:
        logging.debug("request failed validation")

    return False

def process_queue(queue_name, client_secret_server):
    """
    process client messages from an SQS queue

    @param  queue_name sqs queue to process

    @param client_secret_server 

    @type queue_name string

    @type client_secret_server

    """

    assert(isinstance(queue_name, basestring))
    assert(isinstance(client_secret_server,RadiusSecrets))
    
    sqs_access_key = odin_material_retrieve(_materialName=sqs_credential_materialset,
                                            _materialType="Principal")
    sqs_secret_key = odin_material_retrieve(_materialName=sqs_credential_materialset,
                                            _materialType="Credential")
    
    
    sqs=boto.connect_sqs(sqs_access_key,sqs_secret_key)
    q=sqs.get_queue(queue_name)
    
    msgs=q.get_messages(num_messages=10)

    logging.info("retrieved %d messages from %s" % (len(msgs),queue_name))

    processed_messages = False

    for msg in msgs:
        processed_messages = True
        request = json.loads(base64.b64decode(dbauto_odin_util.decrypt(msg.get_body())))

        log_request = request.copy()
        log_request['secret'] = '**hidden**'
        logging.info("will process request: %s" % log_request)

        if process_request(request, client_secret_server):
            msg.delete()

    return processed_messages

if __name__ == '__main__':

    client_secret_server = ClientRadiusSecrets(encryption_material=aws_encryption_materialset,
                                               aws_material=aws_credential_materialset,
                                               table_name=dynamo_secret_table
                                               )

    logging.info("will process queue %s" % sqs_submission_queue)

    while True:
        while not process_queue(sqs_submission_queue, client_secret_server):
            sleep_time = random.randint(1,max_sleep_time)
            logging.debug("will sleep for %d seconds" % sleep_time)
            time.sleep(sleep_time)

        
    



